#!/usr/bin/env node
import { readFileSync, writeFileSync } from 'node:fs';
import { resolve } from 'node:path';
import { fileURLToPath } from 'node:url';

const __dirname = fileURLToPath(new URL('.', import.meta.url));
const projectRoot = resolve(__dirname, '..');
const targetPath = resolve(projectRoot, 'docs/custom-overlays/custom-overlays.d.ts');
const activityTypesPath = resolve(projectRoot, 'node_modules/@lumiastream/lumia-types/dist/activity.types.d.ts');
const variablesTypesPath = resolve(projectRoot, 'node_modules/@lumiastream/lumia-types/dist/variables.types.d.ts');

const sections = [
  { name: 'LumiaAlertValues', sourcePath: activityTypesPath },
  { name: 'SystemVariables', sourcePath: variablesTypesPath },
];

function extractEnumBlock(fileContent, enumName) {
  const marker = `export declare enum ${enumName}`;
  const start = fileContent.indexOf(marker);
  if (start === -1) {
    throw new Error(`Could not find enum ${enumName} in source file.`);
  }

  const braceStart = fileContent.indexOf('{', start);
  if (braceStart === -1) {
    throw new Error(`Could not locate opening brace for enum ${enumName}.`);
  }

  let index = braceStart + 1;
  let depth = 1;
  while (depth > 0 && index < fileContent.length) {
    const char = fileContent[index];
    if (char === '{') depth += 1;
    else if (char === '}') depth -= 1;
    index += 1;
  }

  if (depth !== 0) {
    throw new Error(`Unbalanced braces while parsing enum ${enumName}.`);
  }

  const end = index; // position after the closing brace
  const block = fileContent.slice(start, end).trimEnd();
  return `${block}\n`;
}

function replaceSection(targetContent, sectionName, newContent) {
  const startToken = `// <auto-generated-start name="${sectionName}" />`;
  const endToken = `// <auto-generated-end name="${sectionName}" />`;

  const startIdx = targetContent.indexOf(startToken);
  const endIdx = targetContent.indexOf(endToken);

  if (startIdx === -1 || endIdx === -1) {
    throw new Error(`Could not find markers for section ${sectionName}.`);
  }

  if (endIdx < startIdx) {
    throw new Error(`End marker appears before start marker for section ${sectionName}.`);
  }

  const before = targetContent.slice(0, startIdx + startToken.length);
  const after = targetContent.slice(endIdx);
  const replacement = `\n${newContent}\n`;

  return `${before}${replacement}${after}`;
}

function sync() {
  let targetContent = readFileSync(targetPath, 'utf8');

  for (const { name, sourcePath } of sections) {
    const sourceContent = readFileSync(sourcePath, 'utf8');
    const enumBlock = extractEnumBlock(sourceContent, name);
    targetContent = replaceSection(targetContent, name, enumBlock);
  }

  writeFileSync(targetPath, targetContent, 'utf8');
  console.log('Developer Docs custom overlay d.ts synced with @lumiastream/lumia-types.');
}

try {
  sync();
} catch (error) {
  console.error(error instanceof Error ? error.message : error);
  process.exitCode = 1;
}
